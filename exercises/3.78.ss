#|

Exercise 3.78: Consider the problem of designing a
signal-processing system to study the homogeneous
second-order linear differential equation

d^2 y        d y
-----  -  a -----  -  by  =  0
d t^2        d t

The output stream, modeling y, is generated by a network
that contains a loop. This is because the value of d^2y /
dt^2 depends upon the values of y and dy / dt and both of
these are determined by integrating d^2y / dt^2. The diagram
we would like to encode is shown in Figure 3.35. Write a
procedure "solve-2nd" that takes as arguments the constants
a, b, and dt and the initial values y_0 and dy_0 for y and
dy / dt and generates the stream of successive values of y.

|#

(load-ex "3.77")

#| Answer |#
(define (solve-2nd a b dt y0 dy0)
  (define y (integral (delay dy) y0 dt))
  (define dy (integral (delay ddy) dy0 dt))
  (define ddy (add-streams (scale-stream dy a) (scale-stream y b)))
  y)

#| Tests 

Using wolfram alpha:
  f''(t) - 5f'(t) - 4f(t) = 0, f(0)=1, f'(0)=1
  f(t) = 1/82 e^(-1/2 (sqrt(41) - 5) t) ((41 - 3 sqrt(41)) e^(sqrt(41) t) + 41 + 3 sqrt(41))
  f(0) = 1
  f(1) = 79.909
  f(1.5) = 1376.49

dt=0.001
  > (define dt 0.001)
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 0 dt))
  1
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 1 dt))
  78.63130577134581
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 1.5 dt))
  1343.4632095490801

dt=0.0001
  > (define dt 0.0001)
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 0 dt))
  1
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 1 dt))
  79.77990005876653
  > (stream-ref (solve-2nd 5 4 dt 1 1) (/ 1.5 dt))
  1373.1373034830951

  Seems to be approaching the correct answers.

|#
